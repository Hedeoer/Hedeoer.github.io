[{"content":"Map 基本依赖 依赖图 Map元素特点   Map与Collection并列存在，用于保存具有键值对的数据，\u0026lt;key,value\u0026gt;,\n  由于Key的hash值存放数据位置于HashMap$Node中，故加入的键为无序的\n  不可有重复的元素出现，key和values都可为null，键不可重复，若重复则新数据覆盖旧数据，value可重复；区别于HashSet，HashSet中添加“相同”的元素，底层将会直接跳出添加方法，无法加入，也即无重复的元素\n  通常取字符串为key\n  可由key寻找value\n  hashMap 类属性和方法 #属性 public class HashMap\u0026lt;K,V\u0026gt; extends AbstractMap\u0026lt;K,V\u0026gt; implements Map\u0026lt;K,V\u0026gt;, Cloneable, Serializable 内部类\n实现接口Map.Entry\u0026lt;K,V\u0026gt; ，便于将HashMap集合中的key—value放于Node结点\nstatic class Node\u0026lt;K,V\u0026gt; implements Map.Entry\u0026lt;K,V\u0026gt; {} 存放HashMap中的key\nfinal class KeySet extends AbstractSet\u0026lt;K\u0026gt; {} HashMap类中的方法keySet()可获取Set类型的key集合\npublic Set\u0026lt;K\u0026gt; keySet() { Set\u0026lt;K\u0026gt; ks = keySet; if (ks == null) { ks = new KeySet(); keySet = ks; } return ks; } HashMap类中的方法values()可获取Collection类型的value集合\npublic Collection\u0026lt;V\u0026gt; values() { Collection\u0026lt;V\u0026gt; vs = values; if (vs == null) { vs = new Values(); values = vs; } return vs; } final class Values extends AbstractCollection\u0026lt;V\u0026gt; {} HashMap类中的方法entrySet()可获取Map.Entry\u0026lt;K,V\u0026gt;类型的key-value集合,通过实现Map接口中的V getValue()和\nK getKey()抽象方法，获取key和value\nHashMap中的entrySet属性\ntransient Set\u0026lt;Map.Entry\u0026lt;K,V\u0026gt;\u0026gt; entrySet; HashMap中的entrySet()方法\npublic Set\u0026lt;Map.Entry\u0026lt;K,V\u0026gt;\u0026gt; entrySet() { Set\u0026lt;Map.Entry\u0026lt;K,V\u0026gt;\u0026gt; es; return (es = entrySet) == null ? (entrySet = new EntrySet()) : es; } final class EntrySet extends AbstractSet\u0026lt;Map.Entry\u0026lt;K,V\u0026gt;\u0026gt; {} static final class TreeNode\u0026lt;K,V\u0026gt; extends LinkedHashMap.Entry\u0026lt;K,V\u0026gt; } 属性应用总结   通过HashMap类中的方法**entrySet()**可获取key-value集合，\n此集合为Map.Entry\u0026lt;K,V\u0026gt;类型，\n而Node\u0026lt;K,V\u0026gt; implements Map.Entry\u0026lt;K,V\u0026gt;接口，并实现接口Map.Entry\u0026lt;K,V\u0026gt;的**getKey（）和getvalue（）**方法，\n  HashMap类中的方法keySet()可获取Set类型的key集合\nHashMap类中的方法values()可获取Collection类型的value集合\n  故一个K-V对也可称为一个Node或者一个entry\n  ###用HashMap说明Map的遍历方法\npublic class Map_ { public static void main(String[] args) { Map map = new HashMap(); map.put(1,\u0026#34;First\u0026#34;); map.put(2,\u0026#34;Second\u0026#34;); map.put(\u0026#34;林枫\u0026#34;,\u0026#34;玉瑶\u0026#34;); map.put(new Male(\u0026#34;左手\u0026#34;),new Female(\u0026#34;右手\u0026#34;)); System.out.println(map); //使用Map.keySet()方法,获得Set类型的key集合，---》集合的遍历方法  Set keytSet = map.keySet(); //增强for  for (Object o : keytSet) { System.out.println(o); } //迭代器  Iterator iterator = keytSet.iterator(); while(iterator.hasNext()){ System.out.println(iterator.next()); } //使用Map.values()方法获取value，得到Collection类型的集合，  //普通for，增强for，迭代器，演示省略  Collection values = map.values(); System.out.println(values); //使用Map.entrySet()方法,继而迭代器和增强for  Set entrySet = map.entrySet(); for (Object o : entrySet) { //HashMap$Node实现了HashMap$Entry，打印类型时将为实现类  System.out.println(o.getClass());//class java.util.HashMap$Node多态传递现象  Map.Entry map_Entry = (Map.Entry) o; System.out.println(map_Entry.getClass()); System.out.println(map_Entry.getKey()+\u0026#34;\u0026#34;+map_Entry.getValue()); } } } class Male{ public String name; public Male(String name) { this.name = name; } @Override public String toString() { return this.name; } } class Female{ public String name; public Female(String name) { this.name = name; } public String toString() { return this.name; } } 具体实例 public class test { public static void main(String[] args) { HashMap map = new HashMap(); Employee jack = new Employee(001, \u0026#34;jack\u0026#34;, 100000d); Employee jack1 = new Employee(001, \u0026#34;jack1\u0026#34;, 100000d); Employee jordan = new Employee(003, \u0026#34;jordan\u0026#34;, 48581d); Employee mirael = new Employee(004, \u0026#34;mirael \u0026#34;, 456772.8d); map.put(jack.getId(),jack); map.put(jack1.getId(),jack1); map.put(jordan.getId(),jordan); map.put(mirael.getId(),mirael); Set keySet = map.keySet(); for (Object o : keySet) { Employee employee_value = (Employee) map.get(o); if(employee_value.getSalary()\u0026gt;=80000d){ System.out.println(employee_value); } } Collection values = map.values(); for (Object value : values) { Employee value_Employee = (Employee) value; if(value_Employee.getSalary()\u0026gt;=80000d) System.out.println(value_Employee); } Set set = map.entrySet(); for (Object o : set) { Map.Entry o1 = (Map.Entry) o; Employee em_=(Employee) o1.getValue(); if(em_.getSalary()\u0026gt;=80000d) System.out.println(o1); // System.out.println(o1.getValue().getClass());  } } } class Employee{ private final int id; private final String name; private final Double salary; public int getId(){ return this.id; } public Double getSalary(){ return this.salary; } public Employee(int id,String name,Double salary){ this.id=id; this.name=name; this.salary=salary; } public String getName() { return name; } public String toString(){ return this.name; } /* public int hashCode(Object obj1){ Employee obj=(Employee)obj1; return Objects.hash(obj.id,obj.salary,obj.name); } public boolean equals(Object obj){ if(obj.getClass()!=Employee.class) return false; Employee em = (Employee) obj; return em.getId() == this.id \u0026amp;\u0026amp; em.getSalary() == this.salary\u0026amp;\u0026amp;em.getName()==this.name; }*/ @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Employee employee = (Employee) o; return id == employee.id \u0026amp;\u0026amp; name.equals(employee.name) \u0026amp;\u0026amp; salary.equals(employee.salary); } @Override public int hashCode() { return Objects.hash(id, name, salary); } } put()源码解读  添加元素  final V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict) { Node\u0026lt;K,V\u0026gt;[] tab; Node\u0026lt;K,V\u0026gt; p; int n, i; //初次添加元素进行扩容  if ((tab = table) == null || (n = tab.length) == 0) n = (tab = resize()).length; //利用之前计算的hash，如果由hash和扩容后的table长度与运算得到在table中的位置为null（该位置无元素），则在table中尽量均匀的插入，(n - 1) \u0026amp; hash减小了hash碰撞  if ((p = tab[i = (n - 1) \u0026amp; hash]) == null) tab[i] = newNode(hash, key, value, null); //若该位置有元素，判断是否加入重复的元素和该位置是否是红黑树结点  else { Node\u0026lt;K,V\u0026gt; e; K k; if (p.hash == hash \u0026amp;\u0026amp; ((k = p.key) == key || (key != null \u0026amp;\u0026amp; key.equals(k)))) e = p; else if (p instanceof TreeNode) e = ((TreeNode\u0026lt;K,V\u0026gt;)p).putTreeVal(this, tab, hash, key, value); //既无重复又不是红黑树结点，考虑遍历该链表，此时有该链表p.next == null？为null，则直接尾插于链表后，后并考虑是否需要树化；否则判断p。next是否与e相同，相同，跳出循环，并将e的value覆盖oldValue  else { for (int binCount = 0; ; ++binCount) { if ((e = p.next) == null) { p.next = newNode(hash, key, value, null); if (binCount \u0026gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st  treeifyBin(tab, hash); break; } if (e.hash == hash \u0026amp;\u0026amp; ((k = e.key) == key || (key != null \u0026amp;\u0026amp; key.equals(k)))) break; p = e; } } if (e != null) { // existing mapping for key  V oldValue = e.value; if (!onlyIfAbsent || oldValue == null) e.value = value; afterNodeAccess(e); return oldValue; } } //只有在加于table且该位置不为NUll，modcount才会增加  ++modCount; if (++size \u0026gt; threshold) resize(); afterNodeInsertion(evict);//供给实现子类重写removeEldestEntry（）实现LRU等  return null; } 2.扩容条件：\n  初次添加元素\nif ((tab = table) == null || (n = tab.length) == 0) n = (tab = resize()).length;   达到扩容阈值\nif (++size \u0026gt; threshold) resize();   达到单条链表长度为》=8，但table长度《=64\nif (tab == null || (n = tab.length) \u0026lt; MIN_TREEIFY_CAPACITY) resize();   final Node\u0026lt;K,V\u0026gt;[] resize() { Node\u0026lt;K,V\u0026gt;[] oldTab = table; int oldCap = (oldTab == null) ? 0 : oldTab.length; int oldThr = threshold; int newCap, newThr = 0; if (oldCap \u0026gt; 0) { if (oldCap \u0026gt;= MAXIMUM_CAPACITY) { threshold = Integer.MAX_VALUE; return oldTab; } else if ((newCap = oldCap \u0026lt;\u0026lt; 1) \u0026lt; MAXIMUM_CAPACITY \u0026amp;\u0026amp; oldCap \u0026gt;= DEFAULT_INITIAL_CAPACITY) newThr = oldThr \u0026lt;\u0026lt; 1; // double threshold  } else if (oldThr \u0026gt; 0) // initial capacity was placed in threshold  newCap = oldThr; else { // zero initial threshold signifies using defaults  newCap = DEFAULT_INITIAL_CAPACITY; newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY); } if (newThr == 0) { float ft = (float)newCap * loadFactor; newThr = (newCap \u0026lt; MAXIMUM_CAPACITY \u0026amp;\u0026amp; ft \u0026lt; (float)MAXIMUM_CAPACITY ? (int)ft : Integer.MAX_VALUE); } threshold = newThr; @SuppressWarnings({\u0026#34;rawtypes\u0026#34;,\u0026#34;unchecked\u0026#34;}) Node\u0026lt;K,V\u0026gt;[] newTab = (Node\u0026lt;K,V\u0026gt;[])new Node[newCap]; table = newTab; //确定好threshold和capacity后，将对oldTable进行链表的拆分或者红黑树转链表，目的是使元素尽量均匀的置于table中，提高HashMap的访问性能  if (oldTab != null) { for (int j = 0; j \u0026lt; oldCap; ++j) { Node\u0026lt;K,V\u0026gt; e; if ((e = oldTab[j]) != null) { oldTab[j] = null; if (e.next == null) newTab[e.hash \u0026amp; (newCap - 1)] = e; else if (e instanceof TreeNode) ((TreeNode\u0026lt;K,V\u0026gt;)e).split(this, newTab, j, oldCap); else { // preserve order  Node\u0026lt;K,V\u0026gt; loHead = null, loTail = null; Node\u0026lt;K,V\u0026gt; hiHead = null, hiTail = null; Node\u0026lt;K,V\u0026gt; next; do { next = e.next; //此处将一条链表拆为两条链表，table下标相差16（）  if ((e.hash \u0026amp; oldCap) == 0) { if (loTail == null) loHead = e; else loTail.next = e; loTail = e; } else { if (hiTail == null) hiHead = e; else hiTail.next = e; hiTail = e; } } while ((e = next) != null); if (loTail != null) { loTail.next = null; newTab[j] = loHead; } if (hiTail != null) { hiTail.next = null; newTab[j + oldCap] = hiHead;//oldCap=16  } } } } } return newTab; } 复杂度 Fast-Fail机制 在遍历hahhMap集合时，如果在遍历时，添加(put)或删除(remove)元素，将会失败，并抛出异常java.util.ConcurrentModificationException\npublic class HashMap_Source { public static void main(String[] args) { HashMap map = new HashMap(); map.put(\u0026#34;1\u0026#34;,1); map.put(null,1);//放于table的0位置 return (key == null) ? 0 : (h = key.hashCode()) ^ (h \u0026gt;\u0026gt;\u0026gt; 16);  map.put(\u0026#34;1\u0026#34;,1); map.forEach((k,v)-\u0026gt; map.put(\u0026#34;2\u0026#34;,1));//ConcurrentModificationException  map.forEach((k,v)-\u0026gt; System.out.println(\u0026#34;k\u0026#34;+k+\u0026#34; \u0026#34;+\u0026#34;v\u0026#34;+v)); } } jdk1.7与jdk1.8区别  前者在多线程时会出现  LinkedHashMap   双向链表加数组加红黑树，提高HashMap的遍历，添加，和删除性能，\n  键值对同HashMap一致\n  可以实现LRU原理，即将最近使用最少的元素删除，提高内存的使用效率，重写LinkedHashMap中的removeEldestEntry（）方法，限制Map的元素个数\nvoid afterNodeInsertion(boolean evict) { // possibly remove eldest  LinkedHashMap.Entry\u0026lt;K,V\u0026gt; first; if (evict \u0026amp;\u0026amp; (first = head) != null \u0026amp;\u0026amp; removeEldestEntry(first)) { K key = first.key; removeNode(hash(key), key, null, false, true); } }   例子：\npublic class LinkedHashMap_ extends LinkedHashMap\u0026lt;String,Integer\u0026gt; { private int capatity; public LinkedHashMap_(int pa){ super(16,0.75f,true); this.capatity=pa; } @Override protected boolean removeEldestEntry(Map.Entry\u0026lt;String,Integer\u0026gt; eldest) { return size()\u0026gt;=capatity; } public static void main(String[] args) { LinkedHashMap_ map = new LinkedHashMap_(3); map.put(\u0026#34;1\u0026#34;,1); map.put(\u0026#34;2\u0026#34;,1); map.put(\u0026#34;3\u0026#34;,1); map.get(\u0026#34;2\u0026#34;); map.forEach((k,v)-\u0026gt; System.out.println(\u0026#34;K\u0026#34;+k+\u0026#34;=\u0026#34;+\u0026#34;V\u0026#34;+v)); } }     利用带参数的LinkedHashMap方法，设置其中的accessOrder，可以控制遍历Map的顺序\npublic LinkedHashMap(int initialCapacity, float loadFactor, boolean accessOrder) { //当accessOrder为false时，插入的顺序，为true时，按访问的顺序,这里的“访问”是指get和set方法 HashMap map = new HashMap(); map.put(\u0026#34;1\u0026#34;,1); map.put(null,1); map.put(\u0026#34;2\u0026#34;,1); LinkedHashMap linkedHashMap = new LinkedHashMap(16, 0.75f, true); linkedHashMap.putAll(map); map.get(\u0026#34;1\u0026#34;); linkedHashMap.forEach((k,v)-\u0026gt; System.out.println(\u0026#34;k\u0026#34;+k+\u0026#34; \u0026#34;+\u0026#34;v\u0026#34;+v)); 输出： knllv v k2 v1 k1 v1 当accessOrder为false k1 v1 knllv v1 k2 v1   可由数据量提前设置map集合的初始值，如HashMap：initialCapatity=(元素数/0.75)+1\n  ConcurrentHashMap Treemap Hashtable public class Hashtable\u0026lt;K,V\u0026gt; extends Dictionary\u0026lt;K,V\u0026gt; implements Map\u0026lt;K,V\u0026gt;, Cloneable, java.io.Serializable 与HashMap的异同   由于Hashtable年代久远，没有按驼峰式命名，且现今其Dictionary类已经废弃，故不再使用Hashtable\n  HashMap寻找Table位置的算法更优，效率更高\nHashMap: static final int hash(Object key) { int h; return (key == null) ? 0 : (h = key.hashCode()) ^ (h \u0026gt;\u0026gt;\u0026gt; 16); } Hashtable: Entry\u0026lt;?,?\u0026gt; tab[] = table; int hash = key.hashCode(); int index = (hash \u0026amp; 0x7FFFFFFF) % tab.length;   扩容机制不同 HashMap：默认初始bucket为16，触发扩容后，2倍扩容\nelse if ((newCap = oldCap \u0026lt;\u0026lt; 1) \u0026lt; MAXIMUM_CAPACITY \u0026amp;\u0026amp; oldCap \u0026gt;= DEFAULT_INITIAL_CAPACITY) newThr = oldThr \u0026lt;\u0026lt; 1; // double threshold Hashtable：默认初始bucket为11，触发扩容后，2*initialCapacity+1\nint newCapacity = (oldCapacity \u0026lt;\u0026lt; 1) + 1   HashMap 的\u0026lt;K,V\u0026gt;K,V都可为空，Hashtable的却都不能为null\nHashtable: if (value == null) { throw new NullPointerException(); }   Hashtable 的对外所有方法均有synchironized修饰，即线程安全，\n  ","date":"2021-08-18T10:31:19+08:00","permalink":"https://github.com/Hedeoer/Hedeoer.github.io.git/p/javatest/","title":"JavaTest"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用  思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n 图片  Photo by Florian Klauer on Unsplash   Photo by Luca Bravo on Unsplash \n Photo by Helena Hertz on Unsplash   Photo by Hudai Gayiran on Unsplash \n![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://github.com/Hedeoer/Hedeoer.github.io.git/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu45a5e3ad5e058da6a00650ed8fd40bea_15530_120x120_fill_q75_box_smart1.jpg","permalink":"https://github.com/Hedeoer/Hedeoer.github.io.git/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.— Rob Pike1 Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Italics Bold Code     italics bold code    Code Blocks Code block with backticks \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Fruit  Apple Orange Banana   Dairy  Milk Cheese    Other Elements — abbr, sub, sup, kbd, mark GIFis a bitmap image format.\nH2O\nXn+ Yn= ZnPress CTRL+ALT+Deleteto end the session.\nMost salamandersare nocturnal, and hunt for insects, worms, and other small creatures.\n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","date":"2019-03-11T00:00:00Z","image":"https://github.com/Hedeoer/Hedeoer.github.io.git/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://github.com/Hedeoer/Hedeoer.github.io.git/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\n YouTube Privacy Enhanced Shortcode    Twitter Simple Shortcode .twitter-tweet { font: 14px/1.45 -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif; border-left: 4px solid #2b7bb9; padding-left: 1.5em; color: #555; } .twitter-tweet a { color: #2b7bb9; text-decoration: none; } blockquote.twitter-tweet a:hover, blockquote.twitter-tweet a:focus { text-decoration: underline; }  “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019  Vimeo Simple Shortcode  .__h_video { position: relative; padding-bottom: 56.23%; height: 0; overflow: hidden; width: 100%; background: #000; } .__h_video img { width: 100%; height: auto; color: #000; } .__h_video .play { height: 72px; width: 72px; left: 50%; top: 50%; margin-left: -36px; margin-top: -36px; position: absolute; cursor: pointer; }  ","date":"2019-03-10T00:00:00Z","permalink":"https://github.com/Hedeoer/Hedeoer.github.io.git/p/rich-content/","title":"Rich Content"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\n Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude  Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\n Comas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et  Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://github.com/Hedeoer/Hedeoer.github.io.git/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu958d513eeefe5556a31d065479ecc5ac_14205_120x120_fill_q75_box_smart1.jpg","permalink":"https://github.com/Hedeoer/Hedeoer.github.io.git/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\n Create a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so:  {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }}  To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files  Note: Use the online reference of Supported TeX Functions\nExamples Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"https://github.com/Hedeoer/Hedeoer.github.io.git/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\n N.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n.emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; }","date":"2019-03-05T00:00:00Z","image":"https://github.com/Hedeoer/Hedeoer.github.io.git/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_huf941de4769045cdfa8c9ee7036519a2a_35369_120x120_fill_q75_box_smart1.jpg","permalink":"https://github.com/Hedeoer/Hedeoer.github.io.git/p/emoji-support/","title":"Emoji Support"}]